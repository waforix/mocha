generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

/**
 * Guild model - represents a Discord server
 */
model Guild {
  id          String   @id
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  icon        String?
  ownerId     String
  memberCount Int?

  owner          User            @relation("GuildOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  channels       Channel[]
  members        Member[]
  messageEvents  MessageEvent[]
  voiceEvents    VoiceEvent[]
  memberEvents   MemberEvent[]
  presenceEvents PresenceEvent[]
  reactionEvents ReactionEvent[]

  @@map("guild")
}

/**
 * Channel model - represents a Discord channel
 */
model Channel {
  id        String   @id
  guildId   String
  name      String?
  type      Int
  parentId  String?
  createdAt DateTime @default(now())

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@map("channel")
}

/**
 * User model - represents a Discord user
 */
model User {
  id            String   @id
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  username      String
  discriminator String
  avatar        String?
  bot           Boolean  @default(false)

  ownedGuilds    Guild[]          @relation("GuildOwner")
  members        Member[]
  messageEvents  MessageEvent[]
  voiceEvents    VoiceEvent[]
  memberEvents   MemberEvent[]
  presenceEvents PresenceEvent[]
  reactionEvents ReactionEvent[]

  @@map("user")
}

/**
 * Member model - represents a user's membership in a guild
 */
model Member {
  id        String    @id @default(uuid())
  guildId   String
  userId    String
  nick      String?
  joinedAt  DateTime
  leftAt    DateTime?
  roles     String    @default("[]")
  createdAt DateTime  @default(now())

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("member")
}

/**
 * MessageEvent model - tracks message activity
 */
model MessageEvent {
  id              String   @id
  timestamp       DateTime
  createdAt       DateTime @default(now())
  guildId         String
  channelId       String
  userId          String
  content         String
  attachmentCount Int      @default(0)
  embedCount      Int      @default(0)

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("messageevent")
}

/**
 * VoiceEvent model - tracks voice channel activity
 */
model VoiceEvent {
  id        String    @id @default(uuid())
  timestamp DateTime
  createdAt DateTime  @default(now())
  guildId   String
  channelId String?
  userId    String
  action    String
  duration  Int?

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("voiceevent")
}

/**
 * MemberEvent model - tracks member join/leave/update events
 */
model MemberEvent {
  id        String   @id @default(uuid())
  timestamp DateTime
  createdAt DateTime @default(now())
  guildId   String
  userId    String
  action    String
  roles     String   @default("[]")

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("memberevent")
}

/**
 * PresenceEvent model - tracks user presence/status changes
 */
model PresenceEvent {
  id           String   @id @default(uuid())
  timestamp    DateTime
  createdAt    DateTime @default(now())
  guildId      String
  userId       String
  status       String
  activity     String?
  activityType Int?

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("presenceevent")
}

/**
 * ReactionEvent model - tracks message reaction events
 */
model ReactionEvent {
  id            String   @id @default(uuid())
  timestamp     DateTime
  createdAt     DateTime @default(now())
  guildId       String
  channelId     String
  messageId     String
  userId        String
  emojiId       String?
  emojiName     String
  emojiAnimated Boolean  @default(false)
  action        String

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reactionevent")
}

