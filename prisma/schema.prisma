// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Guild entity - represents a Discord server
model Guild {
  id        String   @id
  name      String
  icon      String?
  ownerId   String
  memberCount Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  channels Channel[]
  members  Member[]
  messageEvents MessageEvent[]
  voiceEvents VoiceEvent[]
  memberEvents MemberEvent[]
  presenceEvents PresenceEvent[]
  reactionEvents ReactionEvent[]

  @@index([ownerId])
  @@map("guilds")
}

// Channel entity - represents a Discord channel
model Channel {
  id        String   @id
  guildId   String
  name      String?
  type      Int
  parentId  String?
  createdAt DateTime @default(now())

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@index([guildId])
  @@index([parentId])
  @@map("channels")
}

// User entity - represents a Discord user
model User {
  id            String   @id
  username      String
  discriminator String
  avatar        String?
  bot           Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  members Member[]
  messageEvents MessageEvent[]
  voiceEvents VoiceEvent[]
  reactionEvents ReactionEvent[]

  @@map("users")
}

// Member entity - represents a user in a guild
model Member {
  id        String   @id @default(cuid())
  guildId   String
  userId    String
  nick      String?
  joinedAt  DateTime
  leftAt    DateTime?
  roles     String?  // JSON-encoded array of role IDs
  createdAt DateTime @default(now())

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([guildId, userId])
  @@index([guildId])
  @@index([userId])
  @@map("members")
}

// Message event - tracks message creation
model MessageEvent {
  id            String   @id @default(cuid())
  guildId       String
  channelId     String
  userId        String
  messageId     String
  content       String?
  attachments   Int      @default(0)
  embeds        Int      @default(0)
  timestamp     DateTime
  createdAt     DateTime @default(now())

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([guildId])
  @@index([userId])
  @@index([channelId])
  @@index([timestamp])
  @@map("message_events")
}

// Voice event - tracks voice state changes
model VoiceEvent {
  id        String   @id @default(cuid())
  guildId   String
  channelId String?
  userId    String
  action    String   // 'join', 'leave', 'move'
  duration  Int?     // milliseconds
  timestamp DateTime
  createdAt DateTime @default(now())

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([guildId])
  @@index([userId])
  @@index([timestamp])
  @@map("voice_events")
}

// Member event - tracks member join/leave
model MemberEvent {
  id        String   @id @default(cuid())
  guildId   String
  userId    String
  action    String   // 'join', 'leave'
  timestamp DateTime
  createdAt DateTime @default(now())

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@index([guildId])
  @@index([timestamp])
  @@map("member_events")
}

// Presence event - tracks user presence changes
model PresenceEvent {
  id        String   @id @default(cuid())
  guildId   String
  userId    String
  status    String   // 'online', 'idle', 'dnd', 'offline'
  timestamp DateTime
  createdAt DateTime @default(now())

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@index([guildId])
  @@index([timestamp])
  @@map("presence_events")
}

// Reaction event - tracks message reactions
model ReactionEvent {
  id        String   @id @default(cuid())
  guildId   String
  channelId String
  messageId String
  userId    String
  emoji     String
  action    String   // 'add', 'remove'
  timestamp DateTime
  createdAt DateTime @default(now())

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([guildId])
  @@index([userId])
  @@index([messageId])
  @@index([timestamp])
  @@map("reaction_events")
}

