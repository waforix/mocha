name: Cleanup

on:
  schedule:
    # Run cleanup every Sunday at 1 AM UTC
    - cron: '0 1 * * 0'
  workflow_dispatch:
    inputs:
      days_to_keep:
        description: 'Number of days to keep workflow runs'
        required: false
        default: '30'
        type: string
      keep_minimum:
        description: 'Minimum number of runs to keep per workflow'
        required: false
        default: '10'
        type: string

permissions:
  actions: write
  contents: read

jobs:
  cleanup-runs:
    name: Cleanup Old Workflow Runs
    runs-on: ubuntu-latest
    steps:
      - name: Delete old workflow runs
        uses: actions/github-script@v7
        with:
          script: |
            const daysToKeep = parseInt('${{ github.event.inputs.days_to_keep || '30' }}');
            const keepMinimum = parseInt('${{ github.event.inputs.keep_minimum || '10' }}');
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);
            
            console.log(`Cleaning up workflow runs older than ${daysToKeep} days (${cutoffDate.toISOString()})`);
            console.log(`Keeping minimum ${keepMinimum} runs per workflow`);
            
            // Get all workflows
            const workflows = await github.rest.actions.listRepoWorkflows({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            let totalDeleted = 0;
            
            for (const workflow of workflows.data.workflows) {
              console.log(`\nProcessing workflow: ${workflow.name} (${workflow.id})`);
              
              // Get workflow runs
              const runs = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workflow.id,
                per_page: 100,
              });
              
              // Sort runs by created date (newest first)
              const sortedRuns = runs.data.workflow_runs.sort((a, b) => 
                new Date(b.created_at) - new Date(a.created_at)
              );
              
              let deletedForWorkflow = 0;
              
              for (let i = 0; i < sortedRuns.length; i++) {
                const run = sortedRuns[i];
                const runDate = new Date(run.created_at);
                
                // Keep minimum number of runs and don't delete recent runs
                if (i < keepMinimum || runDate > cutoffDate) {
                  continue;
                }
                
                try {
                  await github.rest.actions.deleteWorkflowRun({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    run_id: run.id,
                  });
                  
                  deletedForWorkflow++;
                  totalDeleted++;
                  
                  console.log(`  Deleted run ${run.id} from ${runDate.toISOString()}`);
                } catch (error) {
                  console.log(`  Failed to delete run ${run.id}: ${error.message}`);
                }
              }
              
              console.log(`  Deleted ${deletedForWorkflow} runs for ${workflow.name}`);
            }
            
            console.log(`\nTotal deleted: ${totalDeleted} workflow runs`);

  cleanup-artifacts:
    name: Cleanup Old Artifacts
    runs-on: ubuntu-latest
    steps:
      - name: Delete old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const daysToKeep = parseInt('${{ github.event.inputs.days_to_keep || '30' }}');
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);
            
            console.log(`Cleaning up artifacts older than ${daysToKeep} days (${cutoffDate.toISOString()})`);
            
            let page = 1;
            let totalDeleted = 0;
            
            while (true) {
              const artifacts = await github.rest.actions.listArtifactsForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 100,
                page: page,
              });
              
              if (artifacts.data.artifacts.length === 0) {
                break;
              }
              
              for (const artifact of artifacts.data.artifacts) {
                const artifactDate = new Date(artifact.created_at);
                
                if (artifactDate < cutoffDate) {
                  try {
                    await github.rest.actions.deleteArtifact({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      artifact_id: artifact.id,
                    });
                    
                    totalDeleted++;
                    console.log(`Deleted artifact: ${artifact.name} (${artifact.id}) from ${artifactDate.toISOString()}`);
                  } catch (error) {
                    console.log(`Failed to delete artifact ${artifact.id}: ${error.message}`);
                  }
                }
              }
              
              page++;
            }
            
            console.log(`Total deleted: ${totalDeleted} artifacts`);

  cleanup-caches:
    name: Cleanup Old Caches
    runs-on: ubuntu-latest
    steps:
      - name: Delete old caches
        uses: actions/github-script@v7
        with:
          script: |
            const daysToKeep = parseInt('${{ github.event.inputs.days_to_keep || '30' }}');
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);
            
            console.log(`Cleaning up caches older than ${daysToKeep} days (${cutoffDate.toISOString()})`);
            
            try {
              const caches = await github.rest.actions.getActionsCacheList({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 100,
              });
              
              let totalDeleted = 0;
              
              for (const cache of caches.data.actions_caches) {
                const cacheDate = new Date(cache.created_at);
                
                if (cacheDate < cutoffDate) {
                  try {
                    await github.rest.actions.deleteActionsCacheById({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      cache_id: cache.id,
                    });
                    
                    totalDeleted++;
                    console.log(`Deleted cache: ${cache.key} (${cache.id}) from ${cacheDate.toISOString()}`);
                  } catch (error) {
                    console.log(`Failed to delete cache ${cache.id}: ${error.message}`);
                  }
                }
              }
              
              console.log(`Total deleted: ${totalDeleted} caches`);
            } catch (error) {
              console.log(`Cache cleanup failed: ${error.message}`);
              // Don't fail the job if cache cleanup fails
            }

  cleanup-summary:
    name: Cleanup Summary
    runs-on: ubuntu-latest
    needs: [cleanup-runs, cleanup-artifacts, cleanup-caches]
    if: always()
    steps:
      - name: Cleanup Summary
        run: |
          echo "## 🧹 Cleanup Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Cleanup completed for:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.cleanup-runs.result }}" = "success" ]; then
            echo "✅ **Workflow Runs**: Cleaned up old runs" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Workflow Runs**: Cleanup failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.cleanup-artifacts.result }}" = "success" ]; then
            echo "✅ **Artifacts**: Cleaned up old artifacts" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Artifacts**: Cleanup failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.cleanup-caches.result }}" = "success" ]; then
            echo "✅ **Caches**: Cleaned up old caches" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Caches**: Cleanup failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Retention Policy**: Keeping items newer than ${{ github.event.inputs.days_to_keep || '30' }} days" >> $GITHUB_STEP_SUMMARY
          echo "**Minimum Runs**: Keeping at least ${{ github.event.inputs.keep_minimum || '10' }} runs per workflow" >> $GITHUB_STEP_SUMMARY
