name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]

jobs:
  pr-structure:
    name: Validate PR Structure
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check PR title format
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
            revert
          requireScope: false
          disallowScopes: |
            release
          subjectPattern: ^(?![A-Z]).+$
          subjectPatternError: |
            The subject "{subject}" found in the pull request title "{title}"
            didn't match the configured pattern. Please ensure that the subject
            doesn't start with an uppercase character.

      - name: Check PR description
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const body = pr.body || '';
            const minLength = 20;

            if (body.length < minLength) {
              core.setFailed(`PR description is too short. Please provide a meaningful description (minimum ${minLength} characters).`);
              return;
            }

            // Check for common sections
            const hasChanges = /## Changes|### Changes|Changes:/i.test(body);
            const hasContext = /## Context|### Context|Context:|## Why|### Why|Why:/i.test(body);
            
            if (!hasChanges && !hasContext) {
              core.warning('Consider adding a "Changes" or "Context" section to your PR description for better clarity.');
            }

      - name: Check commit messages
        run: |
          # Get all commits in this PR
          git log --format="%s" origin/${{ github.base_ref }}..HEAD > commits.txt
          
          # Check each commit message
          while IFS= read -r commit; do
            if [[ ! "$commit" =~ ^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\(.+\))?: .+ ]]; then
              echo "‚ùå Invalid commit message format: $commit"
              echo "Expected format: type(scope): description"
              echo "Valid types: feat, fix, docs, style, refactor, perf, test, build, ci, chore, revert"
              exit 1
            fi
          done < commits.txt
          
          echo "‚úÖ All commit messages follow conventional format"

      - name: Check for breaking changes
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const title = pr.title;
            const body = pr.body || '';
            
            const hasBreakingInTitle = title.includes('!') || title.toLowerCase().includes('breaking');
            const hasBreakingInBody = /BREAKING CHANGE|breaking change/i.test(body);
            
            if (hasBreakingInTitle || hasBreakingInBody) {
              core.notice('‚ö†Ô∏è This PR contains breaking changes. Make sure to update documentation and version accordingly.');
            }

  file-changes:
    name: Validate File Changes
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for large files
        run: |
          # Check for files larger than 1MB
          large_files=$(find . -type f -size +1M -not -path "./.git/*" -not -path "./node_modules/*" -not -path "./.bun/*")
          if [ -n "$large_files" ]; then
            echo "‚ùå Large files detected (>1MB):"
            echo "$large_files"
            echo "Consider using Git LFS for large files or reducing file size"
            exit 1
          fi
          echo "‚úÖ No large files detected"

      - name: Check for sensitive files
        run: |
          # Check for potentially sensitive files
          sensitive_patterns=(
            "*.key"
            "*.pem"
            "*.p12"
            "*.pfx"
            "*.env"
            "*.env.*"
            "*secret*"
            "*password*"
            "*credentials*"
          )
          
          found_sensitive=false
          for pattern in "${sensitive_patterns[@]}"; do
            files=$(find . -name "$pattern" -not -path "./.git/*" -not -path "./node_modules/*" -not -path "./.bun/*" -not -path "./examples/*/.env.example")
            if [ -n "$files" ]; then
              echo "‚ö†Ô∏è Potentially sensitive files found:"
              echo "$files"
              found_sensitive=true
            fi
          done
          
          if [ "$found_sensitive" = true ]; then
            echo "Please review these files and ensure no secrets are committed"
            echo "Consider adding them to .gitignore if they shouldn't be tracked"
          else
            echo "‚úÖ No sensitive files detected"
          fi

      - name: Check file permissions
        run: |
          # Check for executable files that shouldn't be executable
          executable_files=$(find . -type f -executable -not -path "./.git/*" -not -path "./node_modules/*" -not -path "./.bun/*" -not -name "*.sh" -not -name "*.py" -not -name "*.pl")
          if [ -n "$executable_files" ]; then
            echo "‚ö†Ô∏è Unexpected executable files found:"
            echo "$executable_files"
            echo "Consider removing execute permissions if not needed"
          else
            echo "‚úÖ File permissions look good"
          fi

  dependency-check:
    name: Check Dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for dependency changes
        run: |
          # Check if package.json was modified
          if git diff --name-only origin/${{ github.base_ref }}..HEAD | grep -q "package.json"; then
            echo "üì¶ package.json was modified"
            
            # Show dependency changes
            echo "Dependency changes:"
            git diff origin/${{ github.base_ref }}..HEAD -- package.json | grep -E "^\+.*\".*\":" | sed 's/^+/Added: /' || true
            git diff origin/${{ github.base_ref }}..HEAD -- package.json | grep -E "^-.*\".*\":" | sed 's/^-/Removed: /' || true
          else
            echo "‚úÖ No dependency changes detected"
          fi

  size-impact:
    name: Check Bundle Size Impact
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: ./.github/actions/setup-bun

      - name: Build current branch
        run: |
          bun install
          bun run build
          du -sh dist/ > current-size.txt
          echo "Current build size: $(cat current-size.txt)"

      - name: Build base branch
        run: |
          git checkout origin/${{ github.base_ref }}
          bun install
          bun run build
          du -sh dist/ > base-size.txt
          echo "Base build size: $(cat base-size.txt)"

      - name: Compare sizes
        run: |
          current_size=$(cat current-size.txt | cut -f1)
          base_size=$(cat base-size.txt | cut -f1)
          
          echo "üìä Bundle size comparison:"
          echo "Base: $base_size"
          echo "Current: $current_size"
          
          # Note: This is a simple comparison, could be enhanced with actual size calculation
