name: Release

on:
  push:
    branches: [main]
    paths:
      - 'package.json'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease

concurrency:
  group: release
  cancel-in-progress: false

jobs:
  check-version:
    name: Check Version Change
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.version.outputs.changed }}
      new_version: ${{ steps.version.outputs.version }}
      should_release: ${{ steps.should_release.outputs.result }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check version change
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "version=manual-release" >> $GITHUB_OUTPUT
          else
            current_version=$(jq -r '.version' package.json)
            git checkout HEAD~1
            previous_version=$(jq -r '.version' package.json)
            git checkout -
            
            if [ "$current_version" != "$previous_version" ]; then
              echo "changed=true" >> $GITHUB_OUTPUT
              echo "version=$current_version" >> $GITHUB_OUTPUT
              echo "Version changed from $previous_version to $current_version"
            else
              echo "changed=false" >> $GITHUB_OUTPUT
              echo "No version change detected"
            fi
          fi

      - name: Should release
        id: should_release
        run: |
          if [ "${{ steps.version.outputs.changed }}" = "true" ] || [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "result=true" >> $GITHUB_OUTPUT
          else
            echo "result=false" >> $GITHUB_OUTPUT
          fi

  test-before-release:
    name: Test Before Release
    runs-on: ubuntu-latest
    needs: check-version
    if: needs.check-version.outputs.should_release == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-bun
      
      - name: Run full test suite
        run: |
          bun run check
          bunx tsc --noEmit
          bun test
          bun run build

      - name: Test examples
        run: |
          for example in examples/*/; do
            if [ -f "$example/package.json" ]; then
              echo "Testing $example"
              cd "$example"
              bun install
              bun run check
              cd - > /dev/null
            fi
          done

  build-release:
    name: Build Release
    runs-on: ubuntu-latest
    needs: [check-version, test-before-release]
    if: needs.check-version.outputs.should_release == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-bun

      - name: Build for release
        run: |
          bun install --frozen-lockfile
          bun run build

      - name: Create release package
        run: |
          # Create a clean package for release
          mkdir -p release-package
          cp -r dist/ release-package/
          cp package.json README.md LICENSE release-package/ 2>/dev/null || true
          
          # Create tarball
          cd release-package
          tar -czf ../release.tar.gz .
          cd ..

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            release.tar.gz
            dist/
          retention-days: 30

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [check-version, build-release]
    if: needs.check-version.outputs.should_release == 'true'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            version=$(jq -r '.version' package.json)
          else
            version="${{ needs.check-version.outputs.new_version }}"
          fi
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "tag=v$version" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last tag
          last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$last_tag" ]; then
            commits=$(git log $last_tag..HEAD --pretty=format:"- %s (%h)" --no-merges)
          else
            commits=$(git log --pretty=format:"- %s (%h)" --no-merges -10)
          fi
          
          # Create changelog
          cat > CHANGELOG.md << EOF
          ## What's Changed
          
          $commits
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/$last_tag...v${{ steps.version.outputs.version }}
          EOF
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          release_name: Release ${{ steps.version.outputs.tag }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, 'alpha') || contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'rc') }}

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [check-version, create-release]
    if: needs.check-version.outputs.should_release == 'true' && !contains(needs.check-version.outputs.new_version, 'alpha')
    environment: npm-publish
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-bun

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts

      - name: Setup NPM auth
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

      - name: Publish to NPM
        run: |
          # Copy built files to root for publishing
          cp -r dist/* .
          
          # Publish
          npm publish --access public

      - name: Notify success
        run: |
          echo "âœ… Successfully published version ${{ needs.check-version.outputs.new_version }} to NPM"
