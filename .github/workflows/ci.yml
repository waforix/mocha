name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      src: ${{ steps.changes.outputs.src }}
      examples: ${{ steps.changes.outputs.examples }}
      docs: ${{ steps.changes.outputs.docs }}
      workflows: ${{ steps.changes.outputs.workflows }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            src:
              - 'src/**'
              - 'package.json'
              - 'tsconfig.json'
              - 'biome.json'
            examples:
              - 'examples/**'
            docs:
              - 'docs/**'
              - 'README.md'
            workflows:
              - '.github/workflows/**'

  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.src == 'true' || needs.changes.outputs.examples == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-bun
      - name: Run linting
        run: bun run check
      - name: Check formatting
        run: bun run check --write=false

  typecheck:
    name: Type Check
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.src == 'true' || needs.changes.outputs.examples == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-bun
      - name: Type check main library
        run: bunx tsc --noEmit
      - name: Type check examples
        run: |
          for example in examples/*/; do
            if [ -f "$example/tsconfig.json" ]; then
              echo "Type checking $example"
              cd "$example"
              bunx tsc --noEmit
              cd - > /dev/null
            fi
          done

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.src == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-bun
      - name: Run tests
        run: bun test
      - name: Upload coverage
        uses: codecov/codecov-action@v4
        if: always()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: false

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.src == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-bun
      - name: Build library
        run: bun run build
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  examples:
    name: Test Examples
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.examples == 'true' || needs.changes.outputs.src == 'true'
    strategy:
      matrix:
        example: [stats-bot]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-bun
      - name: Install example dependencies
        run: |
          cd examples/${{ matrix.example }}
          bun install
      - name: Lint example
        run: |
          cd examples/${{ matrix.example }}
          bun run check
      - name: Build example
        run: |
          cd examples/${{ matrix.example }}
          if [ -f "package.json" ] && grep -q '"build"' package.json; then
            bun run build
          fi

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.src == 'true' || needs.changes.outputs.examples == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-bun
      - name: Run security audit
        run: bun audit
        continue-on-error: true

  all-checks:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [lint, typecheck, test, build, examples, security]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.lint.result }}" == "failure" || 
                "${{ needs.typecheck.result }}" == "failure" || 
                "${{ needs.test.result }}" == "failure" || 
                "${{ needs.build.result }}" == "failure" || 
                "${{ needs.examples.result }}" == "failure" ]]; then
            echo "One or more checks failed"
            exit 1
          fi
          echo "All checks passed!"
